import { Knex } from 'knex';
type Without<T, U> = {
    [P in Exclude<keyof T, keyof U>]?: never;
};
type XOR<T, U> = T | U extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
export type PaginationParams = PaginationSliceParams & PaginationDatasetParams & PaginationCursorParams;
export interface PaginationDatasetParams {
    from: string;
    cursorColumn: Column;
    sortColumn: Column;
    sortDirection: SortDirection;
}
export interface PaginationCursorParams {
    obfuscateCursor?: (cursor: Cursor) => Cursor;
    deobfuscateCursor?: (obfuscatedCursor: Cursor) => Cursor;
    onCursorMissing?: 'throw' | 'omit';
}
type Column = XOR<string, AliasedColumn>;
interface AliasedColumn {
    column: string;
    alias: string;
}
export type PaginationSliceParams = ForwardPaginationSliceParams & BackwardPaginationSliceParams;
export interface ForwardPaginationSliceParams {
    first?: number;
    after?: Cursor;
}
export interface BackwardPaginationSliceParams {
    last?: number;
    before?: Cursor;
}
export interface Predicate {
    orderBy: OrderBy;
    limit: number;
    where: Where;
}
export type Cursor = string | number;
export type OrderBy = {
    column: string;
    direction: SortDirection;
};
export type SortDirection = 'asc' | 'desc';
export interface Where {
    column: string;
    comparator: Comparator;
    value: (b: Knex.QueryBuilder) => Knex.QueryBuilder;
}
export interface NoopWhere {
    column: (q: Knex.QueryBuilder) => Knex.QueryBuilder;
    comparator: '>';
    value: 0;
}
export interface Edge<T = unknown> {
    cursor: Cursor;
    node: T;
}
export interface PageInfo {
    endCursor?: Cursor;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    startCursor?: Cursor;
}
export interface Page<T = unknown> {
    edges: Edge<T>[];
    pageInfo: PageInfo;
}
type Row = {
    [key: string]: unknown;
};
export declare function createPagination(params: PaginationParams): {
    getPage: <T = Row>(rows: Row[], opts?: {
        mapItem?: ((item: Row) => T) | undefined;
    }) => Page<T>;
    orderBy: OrderBy;
    limit: number;
    where: Where;
};
type Comparator = '<' | '>';
export {};
